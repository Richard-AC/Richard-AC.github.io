<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://Richard-AC.github.io</id><title>RAC Blog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-06-17T01:48:21+08:00</updated> <author> <name>Richard AC</name> <uri>https://Richard-AC.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://Richard-AC.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2023 Richard AC </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>rdbg - A Rust library for writing custom Windows debuggers</title><link href="https://Richard-AC.github.io/posts/rdbg/" rel="alternate" type="text/html" title="rdbg - A Rust library for writing custom Windows debuggers" /><published>2023-02-27T08:00:00+08:00</published> <updated>2023-02-27T23:49:56+08:00</updated> <id>https://Richard-AC.github.io/posts/rdbg/</id> <content src="https://Richard-AC.github.io/posts/rdbg/" /> <author> <name>Richard AC</name> </author> <category term="Reverse Engineering" /> <category term="Tooling" /> <category term="Automation" /> <category term="Windows" /> <summary> rdbg on Github Introduction Writing a custom debugger can be very useful for many program analysis tasks. MSDN provides a useful template which I ended up using many times including in my TriageTool crash triaging tool which I mentionned in my previous post. However I got tired of copying this boilerplate code and have since ported all my tools to Rust which is why I decided to write rdbg... </summary> </entry> <entry><title>Fuzzing Closed-Source Windows Programs</title><link href="https://Richard-AC.github.io/posts/fuzzing-brava/" rel="alternate" type="text/html" title="Fuzzing Closed-Source Windows Programs" /><published>2021-09-17T19:33:00+08:00</published> <updated>2021-09-19T01:24:58+08:00</updated> <id>https://Richard-AC.github.io/posts/fuzzing-brava/</id> <content src="https://Richard-AC.github.io/posts/fuzzing-brava/" /> <author> <name>Richard AC</name> </author> <category term="Vulnerability Research" /> <summary> Introduction This article describes how I harnessed and fuzzed a closed-source Windows program. Doing so, I found a few zero-days and got paid my first bounty ever! Target selection To select a target I scrolled through the ZDI advisories page looking for softwares where vulnerabilities had recently been found. This strategy has two advantages: If multiple bugs were recently discovere... </summary> </entry> <entry><title>CTF Writeup - NorzhCTF - S1de Ch4nnel</title><link href="https://Richard-AC.github.io/posts/NORZH-sidechannel/" rel="alternate" type="text/html" title="CTF Writeup - NorzhCTF - S1de Ch4nnel" /><published>2021-05-25T19:33:00+08:00</published> <updated>2021-09-18T09:23:10+08:00</updated> <id>https://Richard-AC.github.io/posts/NORZH-sidechannel/</id> <content src="https://Richard-AC.github.io/posts/NORZH-sidechannel/" /> <author> <name>Richard AC</name> </author> <category term="Exploit development" /> <summary> Introduction S1de Ch4nnel was a challenge at NorzhCTF 2021. You can download the challenge here and my commented solution there. Challenge presentation When we ssh into the machine we are given a binary chall and the corresponding code main.c: #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;x86intrin.h&amp;gt; #define PAGE_SIZE 512 #define FLAG_... </summary> </entry> <entry><title>Exploiting CVE-2021-3156 (sudo heap overflow)</title><link href="https://Richard-AC.github.io/posts/sudo-cve/" rel="alternate" type="text/html" title="Exploiting CVE-2021-3156 (sudo heap overflow)" /><published>2021-02-16T19:33:00+08:00</published> <updated>2021-09-18T09:23:10+08:00</updated> <id>https://Richard-AC.github.io/posts/sudo-cve/</id> <content src="https://Richard-AC.github.io/posts/sudo-cve/" /> <author> <name>Richard AC</name> </author> <category term="Exploit development" /> <summary> Introduction Last month, in this article, Qualys disclosed a vulnerability that has been affecting all versions of the program sudo for the last 10 years which can lead to a local privilege escalation. While they suggested some exploitation paths, they didn’t provide a PoC so I thought I would take a stab at exploiting this bug myself. The list of vulnerable versions is in the original ar... </summary> </entry> <entry><title>Clearing up Windows SEH exploitation</title><link href="https://Richard-AC.github.io/posts/SEH/" rel="alternate" type="text/html" title="Clearing up Windows SEH exploitation" /><published>2021-01-06T19:33:00+08:00</published> <updated>2021-09-18T09:23:10+08:00</updated> <id>https://Richard-AC.github.io/posts/SEH/</id> <content src="https://Richard-AC.github.io/posts/SEH/" /> <author> <name>Richard AC</name> </author> <category term="Exploit development" /> <category term="Windows" /> <summary> Introduction SEH is an exception handling mechanism used in Windows programs which has been abused by exploit writers for years. This Corelan article gives a good introduction to SEH and presents the “POP/POP/RET” exploitation technique. However, there is still a lot of confusion as to why such a technique is necessary. Searching for “the need for POP/POP/RET in SEH exploits” on Google did... </summary> </entry> </feed>
